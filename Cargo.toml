# You must change these to your own details.
[package]
name = "rain-effect"
description = "My super awesome Rust, WebAssembly, and Webpack project!"
version = "0.1.0"
authors = ["kaisawind <wind.kaisa@gmail.com>"]
categories = ["wasm"]
readme = "README.md"
edition = "2021"

[lib]
crate-type = ["cdylib"]

[profile.release]
# This makes the compiled code faster and smaller, but it makes compiling slower,
# so it's only enabled in release mode.
lto = true

[features]
# If you uncomment this line, it will enable `wee_alloc`:
#default = ["wee_alloc"]

[dependencies]

# Serde is a framework for serializing and deserializing Rust data structures efficiently and generically.
serde = "1.0.137"

# The `wasm-bindgen` crate provides the bare minimum functionality needed
# to interact with JavaScript.
wasm-bindgen = { version = "0.2.81", features = ["serde-serialize"] }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. However, it is slower than the default
# allocator, so it's not enabled by default.
wee_alloc = { version = "0.4.5", optional = true }

# Converting between JavaScript Promises to Rust Futures.
wasm-bindgen-futures = "0.4.31"

js-sys = "0.3.58"

# futures-rs is a library providing the foundations for asynchronous programming in Rust.
futures = "0.3.21"

# A Rust library for random number generation
rand = "0.8.5"
getrandom = { version = "0.2.7", features = ["js"] }

# The `web-sys` crate allows you to interact with the various browser APIs,
# like the DOM.
[dependencies.web-sys]
version = "0.3.58"
features = [
  'CanvasRenderingContext2d',
  'console',
  'Window',
  'Document',
  'HtmlCanvasElement',
  'HtmlImageElement',
  'CssStyleDeclaration',
  'Event',
  'EventListener',
  'Performance',
  'PerformanceTiming',
  'WebGlBuffer',
  'WebGlRenderingContext',
  'WebGlProgram',
  'WebGlShader',
]

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so it's only enabled
# in debug mode.
[target."cfg(debug_assertions)".dependencies]
console_error_panic_hook = "0.1.7"

# These crates are used for running unit tests.
[dev-dependencies]
wasm-bindgen-test = "0.3.31"
futures = "0.3.21"
js-sys = "0.3.58"
wasm-bindgen-futures = "0.4.31"
